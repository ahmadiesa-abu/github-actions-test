name: "Install or update EAAS"
on:
  push:
    branches: [ develop/* ]
jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Upload blueprint
        id: upload-blueprint
        uses: ahmadiesa-abu/cli-action@v1.0.0
        with:
          command: blueprints upload terraform/blueprint.yaml -b $DEP_BLUEPRINT_ID
      - name: create deployment
        uses: ahmadiesa-abu/cli-action@v1.0.0
        with:
          command: deployments create  -b $DEP_BLUEPRINT_ID $DEP_DEPLOYMENT_ID
      - name: execute install
        uses: ahmadiesa-abu/cli-action@v1.0.0
        with:
          command: executions start install -d $DEP_DEPLOYMENT_ID
      - name: get cloud resource node instance id
        id: get_instance_id
        uses: ahmadiesa-abu/cli-action@v1.0.0
        with:
          command: node-instances list -d $DEP_DEPLOYMENT_ID -n cloud_resources --json

      - id: format_node_list
        name: format command output
        shell: python
        run: |
          cli_output = ${{steps.get_instance_id.outputs.cli-output}}
          cli_output = cli_output.decode()
          cli_output = cli_output.replace('"','\"')
          print ('::set-output name=cli-output::{0}'.format(cli_output))

      - name: get cloud resource instane runtime properties
        id: get_node_instance_runtime
        uses: ahmadiesa-abu/cli-action@v1.0.0
        with:
          command: node-instances get ${{ fromJSON(steps.format_node_list.outputs.cli-output.id) }} --json

      - id: format_node_get
        name: format command output
        shell: python
        run: |
          cli_output = ${{steps.get_node_instance_runtime.outputs.cli-output}}
          cli_output = cli_output.decode()
          cli_output = cli_output.replace('"','\\"')
          print ('::set-output name=cli-output::{0}'.format(cli_output))


      - name: get cloud resource plan runtime property
        shell: python
        run: |
          cli_output = ${{fromJSON(steps.format_node_get.outputs.cli-output.plan)}}
          cli_output = cli_output.decode()
          print ('::set-output name=cli-output::{0}'.format(cli_output))

env:
  DEP_BLUEPRINT_ID: bp-${{ github.run_id }}
  DEP_DEPLOYMENT_ID: dep-${{ github.run_id }}
  CLOUDIFY_HOST: ${{ secrets.CLOUDIFY_HOST }}
  CLOUDIFY_USERNAME: ${{ secrets.CLOUDIFY_USERNAME }}
  CLOUDIFY_PASSWORD: ${{ secrets.CLOUDIFY_PASSWORD }}
  CLOUDIFY_TENANT: default_tenant
  CLOUDIFY_SSL: ${{ secrets.CLOUDIFY_SSL }}
  CLOUDIFY_SSL_TRUST_ALL: ${{ secrets.CLOUDIFY_SSL_TRUST_ALL }}
